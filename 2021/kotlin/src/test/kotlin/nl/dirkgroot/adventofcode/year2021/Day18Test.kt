package nl.dirkgroot.adventofcode.year2021

import nl.dirkgroot.adventofcode.util.StringInput
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.CsvSource
import kotlin.test.assertEquals

class Day18Test {
    private val example =
        StringInput(
            """
            [[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
            [[[5,[2,8]],4],[5,[[9,9],0]]]
            [6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
            [[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
            [[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
            [[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
            [[[[5,4],[7,7]],8],[[8,3],8]]
            [[9,3],[[9,9],[6,[4,9]]]]
            [[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
            [[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
            """.trimIndent()
        )

    @Test
    fun explode() {
        assertEquals(
            Day18.parseNumber("[[[[0,9],2],3],4]"),
            Day18.explode(Day18.parseNumber("[[[[[9,8],1],2],3],4]"))
        )
        assertEquals(
            Day18.parseNumber("[7,[6,[5,[7,0]]]]"),
            Day18.explode(Day18.parseNumber("[7,[6,[5,[4,[3,2]]]]]"))
        )
        assertEquals(
            Day18.parseNumber("[[6,[5,[7,0]]],3]"),
            Day18.explode(Day18.parseNumber("[[6,[5,[4,[3,2]]]],1]"))
        )
        assertEquals(
            Day18.parseNumber("[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]"),
            Day18.explode(Day18.parseNumber("[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]"))
        )
        assertEquals(
            Day18.parseNumber("[[3,[2,[8,0]]],[9,[5,[7,0]]]]"),
            Day18.explode(Day18.parseNumber("[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]"))
        )
    }

    @Test
    fun split() {
        assertEquals(
            Day18.parseNumber("[[[[0,7],4],[[7,8],[0,13]]],[1,1]]"),
            Day18.split(Day18.parseNumber("[[[[0,7],4],[15,[0,13]]],[1,1]]"))
        )
    }

    @Test
    fun reduce() {
        assertEquals(
            Day18.parseNumber("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"),
            Day18.reduce(Day18.parseNumber("[[[[4,3],4],4],[7,[[8,4],9]]]").add(Day18.parseNumber("[1,1]")))
        )
        assertEquals(
            Day18.parseNumber("[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]"),
            Day18.reduce(Day18.parseNumber("[[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]"))
        )
        assertEquals(
            Day18.parseNumber("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"),
            Day18.reduce(Day18.parseNumber("[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]"))
        )
    }

    @ParameterizedTest
    @CsvSource(
        value = [
            "[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]:[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]:[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]",
            "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]:[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]:[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]",
            "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]:[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]:[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]",
            "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]:[7,[5,[[3,8],[1,4]]]]:[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]",
            "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]:[[2,[2,2]],[8,[8,1]]]:[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]",
            "[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]:[2,9]:[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]",
            "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]:[1,[[[9,3],9],[[9,0],[0,7]]]]:[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]",
            "[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]:[[[5,[7,4]],7],1]:[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]",
            "[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]:[[[[4,2],2],6],[8,7]]:[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]"
        ],
        delimiter = ':'
    )
    fun add(n1: String, n2: String, expected: String) {
        assertEquals(
            Day18.parseNumber(expected),
            Day18.parseNumber(n1).add(Day18.parseNumber(n2))
        )
    }

    @Test
    fun part1FinalSum() {
        assertEquals(
            Day18.parseNumber("[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]"),
            Day18.parse(example.lines()).reduce { acc, node -> acc.add(node) }
        )
    }

    @Test
    fun part1() {
        assertEquals(4140L, Day18(example).part1())
    }

    @Test
    fun part2() {
        assertEquals(3993L, Day18(example).part2())
    }
}